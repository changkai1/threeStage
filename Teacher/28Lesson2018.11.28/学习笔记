1、全局安装
    cnpm install create-react-app -g
2、查看版本号
    create-react-app -V
3、创建项目
    create-react-app my-app
4、cd my-app
5、运行项目
    cnpm start
*****************************路由****************************************************
1、安装路由模块
    cnpm install react-router-dom  --save
2、使用路由
    import {BrowserRouter as Router,Route} from 'react-router-dom'
    Router------路由器
    Route-------路由
        路由需要放到路由器里面

    exact:exact精确匹配
    Router组件内只能有一个子元素。
3、导航
    NavLink

    exact:精确匹配

    activeStyle:选 中以后的STYLE
    activeClassName:选 中以后所用的class
4、Switch：默认是全部匹配路由进行渲染，通过Switch只匹配第一个符合条件的路由。当找到第一个匹配的路由后，不会继续查找。
5、404
    <Route path={"*"} component={Error}></Route>
    或
    <Route component={Error}></Route>// 如果省略Path为全部匹配
6、重定向：当访问地址为five 重定向到two
    <Redirect from={"/five"} to={"/two"}></Redirect>
***************************************路由传值***********************************************************************
1、传值
    1、如何传
       <NavLink className={"blue"} exact activeStyle={{color:"red"}} to={"/one/1/3"}>one</NavLink>
        <Route exact path={"/one/:id/:type"} component={One}></Route>
    2、如何接收
        this.props.match.params
       优点：刷新页面数据不会丢失
       缺点;只能接收字符串
2、传值：
    1、如何传
     <NavLink className={"blue"} activeClassName={"active"} to={{pathname:"/two",query:{a:1,b:2,c:{userName:"lala"}}}}>Two2</NavLink>
    2、如何接收
    this.props.location.query
    优点：可以传递对象
    缺点：刷新后数据会丢失
3、传值
    1、如何传
    <NavLink className={"blue"} activeStyle={{color:"red"}}
    to={{pathname:"/three",state:{id:3,type:5,c:{age:12}}}}>Three3</NavLink>
    2、如何接收
     console.log(this.props.location.state);
     优点：刷新数据不会丢失，同时也可以传递对象
     缺点：当你将该地址再次打开时，数据会丢失
************************
编程式导航：
 this.props.history.push("/login");
 this.props.history.push({pathname:"/login",query:{a:1,b:2}});
 this.props.history.push({pathname:"/login",state:{a:1,b:2}});
 this.props.history.go(1);
















