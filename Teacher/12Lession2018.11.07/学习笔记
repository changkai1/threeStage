1、数据驱动的,   js是不互通
2、渐进式
  JavaScript 框架
3、开发版：包含完整的警告和调试模式
   生产版：删除了警告，30.90KB min+gzip
使用VUE.JS
1、引入你的 vue.js
    <script src="lib/vue.js"></script>
2、实例化Vue
    new Vue({
        el:"#id"// .class element  document.querySelector()
    })
**********************指令*******************************************
指令：在VUE.JS当中以v-开头用于对元素的属性进行扩展的称为指令。
1、v-if: 是否渲染元素的内容。 值是一个布尔值。
   v-else-if:当v-if条件不满足时，执行判断，值也是一个布尔值。
   v-else:当v-if 与v-else-if都不满足时，会执行。
2、v-model:用于将数据绑定到表单元素当中。
3、v-show:用于对指定的内容显示与隐藏。值也是一个布尔值。
4、v-html:将数据渲染到所在的元素中，支持HTML
5、v-text:将数据渲染到所在的元素中,以纯文本的形式。
6、v-bind:将数据绑定到元素的属性当中。
    缩写形式：冒号（：）
        <p class="bg red">写上一句话！风往北吹！老师唱的。</p>
        <p v-bind:class="bg">那就是青藏高原！</p>
        <p class="red">那就是青藏高原！</p>
        <p :class="'bg'">你猜我是什么样子</p>
        <p :class="'bg red'">你猜我是什么样子</p>
        <p :class="[abc,def]">你猜我是什么样子</p>
        <p :class="{bg:num==2}">你猜我是什么样子</p>
        <p :class="[bg,'red']">你猜我是什么样子</p>
7、v-on: 可以通过该指令定义事件。如果你不传值的话，（）是可以省略的。  简写是@
8、v-pre:忽略你的{{}}。
9、v-once:使用第一次赋予的值。以后数据发生变化，不会再次进行响应。

{{}}:可以实现对数据的渲染。也可以在里面写一些表达式。但是不能实用到属性当中。
修饰符：
    number:v-model.number="num"  将内容设置为number
    lazy:当失去焦点时，才会对数据进行响应
    trim：去除左右两侧空格
冒泡：
    @click.stop

     @click="fn(3,$event)"://当你需要传递参数，并且还要传递事件对象时
     @click="fn";//  默认参数即是事件对象。

     click.prevent: 取消默认事件    contextmenu 右击事件



