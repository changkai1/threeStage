1、var vm=new Vue({
    data:{

    },
    methods:{

    },
    computed:{

    },
    mounted(){

    },
    filters:{

    }
})
* vm是通过VUE生成的实例（VUE实例）
vm.$el----------->获得VUE所挂载的元素
vm.$options------>可以调用 VUE自定义的属性与方法
vm.$data--------->即是VUE当中的data属性。
$mount手动挂载
*****************************侦听**************************************************
watch:用于实现侦听数据是否发生变化。
用法：
    1、new Vue({
        watch:{
            str(){// 侦听数据str,当str发生变化时会执行该侦听函数。
                   // 如果侦听的数据是引用类型的话，只能侦听到引用地址发生的变化。如果是属性值发生变化是仙听不到的。

            }
        }
    })
       外部：
           // 第一个参数是侦听的数据名字，第二参数是一个方法（当你侦听的数据发生变化时会执行该函数）
            // vm.$watch("str",function(newValue,oldValue){
            //     console.log(newValue,oldValue);
            //     vm.$data.num+=1;
            // })

    2、深度侦听：
        可以侦听到引用类型的属性值是否分生变化
        new Vue({
            watch:{
                obj:{
                    deep:true,//你要深度侦听
                    handler(){// 侦听到OBJ属性发生变化时会执行该函数。
                    }
                }
            }
        })
        外部
        vm.$watch("obj",function(){
            console.log(3344534);
        },{
            deep:true
        })
        ***********************ajx*****************************************
          1.jsonp
                    this.$http.jsonp("http://www.baidu.com",{
                        a:1,
                        b:2
                    },{
                        jsonp:"cb"
                    }).then(function({data}){

                    })
         2、get
            this.$http.get("http://127.0.0.1",{
                a:1,
                b:2
            }).then(({data})=>{});
         3、post
         ****************************模板********************************************
         *只能有一个根目录。
         1、template=`<div></div>`
         2、<script type="x-template" id="tp">
            </script>
         3、<template id="tp">
            </template>

            ******************传值************************
            父子属性，子父事件，非父子公共，以及vuex
            父子：
                属性
                定理：
                  1、组件可以使用自身的属性。但是必须要进行允许设置。props:["要使用的属性名"]
                  2、{{属性名}}
                  *子组件不能够直接修改父组件传过来的属性值
                  *子组件接收的值不要与data内的返回对象属性同名
