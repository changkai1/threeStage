1、插槽 slot
    1.匿名插槽：无名字，slot没有name属性
        只能使用一次
        1.1.1父组件
            <template>
                <div>
                    学习
                    <myslot> // myslot是子组件，在组件里写东西，在子组件显示
                        <p>鸟语花香</p>
                    </myslot>
                </div>
            </template>

        1.1.2子组件
            <template>
                <div>
                    我在这里啊   //这里的内容不会被覆盖
                    <!-- 匿名插槽 -->
                    <slot>
                        <p>父组件如果没有内容，会默认显示，父组件有内容会被覆盖</p>
                    </slot> //插槽，写在子组件里的匿名插槽
                </div>
            </template>

    2.具名插槽：有名字，slot有name属性
        名字不能重复
        1.2.1 父组件
            <template>
                <div>
                    学习
                    <myslot>
                        <p slot="one">花好月圆one</p>
                        <p slot="two">天地人和two</p>
                    </myslot>
                </div>
            </template>
        
        1.2.2 子组件
            <template>
                <div>
                    我在这里啊
                    <slot name="one"></slot> // 子组件的具名插槽,在父组件的插槽在这显示
                    <slot name="two"></slot> // 子组件的具名插槽,在父组件的插槽在这显示
                </div>
            </template>
    
    3.插槽的域 slot-scope
        1.3.1 父组件
        <template>
            <div>
                学习
                <myslot> // 组件
                    // slot-scope="item"  item是一个数组，存放的是子组件slot的属性
                    <div slot="three" slot-scope="item">
                        <p>{{item.userName}}</p>
                        <p v-for="(v,index) in item.arr" :key="index">{{v}}</p>
                    </div>

                </myslot>
            </div>
        </template>

        1.3.2 子组件
        <template>
            <slot name="three" userName="123" :arr="arr" /></slot>
        </template>

        data(){
            return{
                arr:[1,2,3,4]
            }
        }

2、ref使用
    2.1 父组件
        <template>
            <myref ref="xixi"></myref>
            <div ref="myDiv">
                你是谁？？
            </div>
            <input type="text" ref="userName">
            <input type="button" value="点我啊" @click="fn">
        </template>

        methods:{
            fn(){
                console.log(this.$refs.myDiv.innerHTML)    //获取div的内容
                console.log(this.$refs["myDiv"].innerHTML) //获取div的内容
                console.log(this.$refs.userName.value)     //获取输入框的内容
                console.log(this.$refs["xixi"].$data.arr)  //执行的是myref组件里data数据里的arr
                this.$refs["xixi"].fn()                    //执行的是myref组件里methods方法里的fn
                this.$refs["xixi"].num = 10;               //修改子组件里的数据
            }
        }

    2.2 子组件
        <template>
            <div>
                子组件{{num}}
            </div>
        </template>

        data(){
            num:1,
            arr:[1,2,3,4]
        },
        methods:{
            fn(){
                console.log("执行到了子组件！！")
            }
        }
